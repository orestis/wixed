# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

import _eventsim
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class UIEventSimulator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _eventsim.new_UIEventSimulator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eventsim.delete_UIEventSimulator
    __del__ = lambda self : None;
    def MouseMove(*args): return _eventsim.UIEventSimulator_MouseMove(*args)
    def MouseDown(*args): return _eventsim.UIEventSimulator_MouseDown(*args)
    def MouseUp(*args): return _eventsim.UIEventSimulator_MouseUp(*args)
    def MouseClick(*args): return _eventsim.UIEventSimulator_MouseClick(*args)
    def MouseDblClick(*args): return _eventsim.UIEventSimulator_MouseDblClick(*args)
    def MouseDragDrop(*args): return _eventsim.UIEventSimulator_MouseDragDrop(*args)
    def KeyPress(*args): return _eventsim.UIEventSimulator_KeyPress(*args)
    def KeyChar(*args): return _eventsim.UIEventSimulator_KeyChar(*args)
UIEventSimulator_swigregister = _eventsim.UIEventSimulator_swigregister
UIEventSimulator_swigregister(UIEventSimulator)



