 * Better buffer performance:
   * if storing the text on a buffer is unusable, use the buffer as a proxy to scintilla.
   * Lock the buffer, you fool!
   * use mmap - have to create tmp files for unnamed buffers, and do clever stuff when assigning to filenames
   * it seems like dots were pathological when used with the python lexer.
   * Take care to not fiddle with the buffer while it is colorized
   * [DONE - routing the SyncFromBuffer through wx.CallAfter fixes this]
     running chatty 3 times with 100000 chars segfaults - memory leak
     somewhere? 
 * look into http://wiki.wxpython.org/LongRunningTasks for processes
 * [DONE] use multiple views (start with a split window with two STCs and blepoume) 
 * [DONE] editors should not bypass event handling when updating buffers - the buffers should not send events to the editors that created them
 * [DONE] More sophisticated buffer handling - synchronize 'actions' rather than text
 * [NOT STOOPID - IIAB, DFI] Um, would just sending the new line(s) back and forth be simpler than trying to synchronize a lot of crap?
 * [DONE] write the stdout to the console as well, for posterity
 * [DONE] use events rather than polling threads - editors subscribe to their buffers onchange events
 * [DONE] investigate prev/next buffer - each window should have its own index into the bufferlist - prev/next should take index arg
 * [DONE] list of buffers in menu - NB new buffers should automatically appear there
 * [DONE] create new windows (WindowManager.new)
 * kill buffers
 * save and load command line history
 * make the buffer look like a tty so that python shell can be run - pexpect/wexpect do that, have to
   add interaction layer on top. also look at pyconsole.
 * process manager
 * handle minimize/maximize/resize so that the notebook is adjusting itself
 * make new frames NB also when second instance started
 * add pluggable commands handler:
   - it should be possible to register : commands with their executor. function signature could be execute(command, context)
 * add pluggable keybindings handler
 * create a 'fundamental' STC with pluggable lexer 
   - candidates:
     - plain re
     - vim syntax - looks grammar like, will check
     - textmate syntax - complicated but powerful
   - using a full-blown parsing lib is complicated. Let's recreate Vim's way of things for now.
     - For each line, there is a list (of the same length) with a style for each character. 
     - The editor can just index into that list and get the desired style
     - This can be batched in chunks for efficiency, if needed.
     - It can also turn into an object-oriented thingy if we need textmate-like nested scopes.

   - strategies: TOO COMPLICATED FOR NOW
     - the buffer maintains its own scope tree (position -> list of scopes)
     - the parser/lexer runs on a separate thread
     - needs to be locked/synchronized/dirty flag or sth like that
     - the editor queries the buffer for the scope at the current position
     - it has a dict of scopes -> styles, applies them. More specific wins
     - also display the scope in the status bar or sth like that.
 * Python 2.5 only - I'm sick of 2.4
 * highlighting breaks unicode
 * Have a look at http://peppy.flipturn.org/ - too complicated
 * messaging system (command line could also print messages?)
